location /graphql/simple {
    
    include cors.conf;

    if ($request_uri = '/graphql/simple/schema.json') {
        rewrite ^/graphql /internal/graphql/schema.json last;
    }

    if ($request_method = 'POST') {
        # rewrite to internal location handling graphql requests
        rewrite ^/graphql /internal/graphql/ last;
    }

    # everything else is a bad request
    return 400 "Only POST requests are accepted";
}

location /graphql/relay {
    
    
    include cors.conf;

    set_by_lua_block $relay_id_column { return os.getenv('RELAY_ID_COLUMN') or "" }
    if ($request_uri = '/graphql/relay/schema.json') {
        rewrite ^/graphql /internal/graphql/schema.json last;
    }
    if ($request_method = 'POST') {
        # rewrite to internal location handling graphql requests
        rewrite ^/graphql /internal/graphql/ last;
    }

    # everything else is a bad request
    return 400 "Only POST requests are accepted";
}

# this location will generate the graphql schema needed in order to compile fontend code
# that needs this information (Relay / GraphiQL)
location /internal/graphql/schema.json {
    server_tokens off;
    default_type  application/json;
    content_by_lua_block {
        local subzero = require('subzero')
        local hooks = require("hooks")
        local relay_id_column = nil
        if ngx.var.relay_id_column and type( ngx.var.relay_id_column ) == 'string' and ngx.var.relay_id_column ~= '' then
            relay_id_column = ngx.var.relay_id_column;
        end
        ngx.say(subzero.get_graphql_schema(relay_id_column, hooks))
    }
}

# main location that will handle graphql requests
location /internal/graphql/ {
    internal;
    server_tokens off;
    default_type  application/json;

    
    content_by_lua_block {
        local subzero = require('subzero')
        local postgrest = require('postgrest.handle')
        local hooks = require("hooks")
        local relay_id_column = nil
        if ngx.var.relay_id_column and type( ngx.var.relay_id_column ) == 'string' and ngx.var.relay_id_column ~= '' then
            relay_id_column = ngx.var.relay_id_column;
        end
        ngx.req.read_body()
        local body = ngx.req.get_body_data()
        local response
        if body:find('IntrospectionQuery') then
            response = subzero.get_graphql_schema(relay_id_column, hooks)
        else
            postgrest.init(ngx.var.rest_prefix)
            response = postgrest.handle(subzero.get_app_schema(relay_id_column, hooks), subzero.get_json_schema(relay_id_column))
        end
        ngx.say(response)
    }

    if ($development = "1") {
        add_header Request-Time $request_time;
    }
    add_header Content-Location "";
}