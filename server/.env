# Docker specific configs
# use only letters and numbers for the project name
COMPOSE_PROJECT_NAME=subzerostarterkit


# Global configs
DEVELOPMENT=1
JWT_SECRET=reallyreallyreallyreallyverysafe

# DB connection details (used by all containers)
# set PG_VERSION to match your production db major version
PG_VERSION=11.2
DB_HOST=db
DB_PORT=5432
DB_NAME=app
DB_SCHEMA=api
DB_USER=authenticator
DB_PASS=authenticatorpass

# OpenResty
POSTGREST_HOST=postgrest
POSTGREST_PORT=3000
RELAY_ID_COLUMN=id
RABBITMQ_HOST=rabbitmq
RABBITMQ_PORT=15674
ENABLE_CACHE=0

# PostgREST
DB_ANON_ROLE=anonymous
DB_POOL=10
SERVER_PROXY_URI=http://localhost:8080/rest/
#MAX_ROWS=
#PRE_REQUEST=
## custom relations when auto-detection does not work
## (use "@filename" to load from separate file)
## The json format is
## [{"schema":"api", "table":"projects", "fkColumns":["client_id"], "fSchema":"api", "fTable":"clients", "pkColumns":["id"]}]
## Which says api.projects.client_id references api.clients.id
#PGRST_CUSTOM_RELATIONS="[{\"schema\":\"api\", \"table\":\"projects\", \"fkColumns\":[\"client_id\"], \"fSchema\":\"api\", \"fTable\":\"clients\", \"pkColumns\":[\"id\"]}]"


# PostgreSQL container config
# Use this to connect directly to the db running in the container
SUPER_USER=superuser
SUPER_USER_PASSWORD=superuserpass

# RabbitMQ
RABBITMQ_DEFAULT_USER=admin
RABBITMQ_DEFAULT_PASS=adminpass
RABBITMQ_AUTH_ENDPOINT=http://openresty/rabbitmq/auth
